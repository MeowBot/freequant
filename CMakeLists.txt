cmake_minimum_required(VERSION 2.8)
project(freequant)

set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_VERBOSE_MAKEFILE true)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

if(WIN32)
    set(CMAKE_INSTALL_PREFIX $ENV{HOMEPATH})
else()
    set(CMAKE_INSTALL_PREFIX $ENV{HOME})
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} --version OUTPUT_VARIABLE CMAKE_CXX_COMPILER_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+" CMAKE_CXX_COMPILER_VERSION "${CMAKE_CXX_COMPILER_VERSION}")
    if(${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER "4.6")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    endif()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pthread")
elseif(MSVC AND MSVC_VERSION VERSION_LESS "1700")
#    message(FATAL_ERROR "You should use VC 11 or above!")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} --version OUTPUT_VARIABLE CMAKE_CXX_COMPILER_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REGEX MATCH "[0-9]+\\.[0-9]+" CMAKE_CXX_COMPILER_VERSION "${CMAKE_CXX_COMPILER_VERSION}")
    if(${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER "3.0")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    endif()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pthread")
endif()


# Find external dependencies
set(Boost_USE_STATIC_LIBS on)

find_package(Boost REQUIRED COMPONENTS date_time system filesystem thread)
find_package(CURL REQUIRED)
find_package(QuickFIX REQUIRED)
find_package(Doxygen)
if(DOXYGEN_FOUND)
#    add_subdirectory(doc)
endif()


find_package(Ruby 1.9)
if(UNIX)
    find_package(PythonInterp)
endif(UNIX)

if(WIN32 OR UNIX)
    option(BUILD_CTP "Build CTP." TRUE)
elseif(APPLE)
    option(BUILD_CTP "Build CTP." FALSE)
endif()

option(BUILD_TWS "Build TWS." TRUE)
option(BUILD_FIX "Build FIX." TRUE)

# Find in-the-source dependencies
set(TWS_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/vendors/tws)
set(CTP_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/vendors/ctp)

if(WIN32)
    set(CTP_LIBRARY_DIRS ${PROJECT_SOURCE_DIR}/vendors/ctp/api/trade/win/lib ${PROJECT_SOURCE_DIR}/vendors/ctp/api/risk/lib)
elseif(UNIX)
    set(CTP_LIBRARY_DIRS ${PROJECT_SOURCE_DIR}/vendors/ctp/api/trade/linux64/lib)
endif()

if(WIN32)
    find_library(CTP_MDUSER_LIBRARY NAMES thostmduserapi PATHS ${CTP_LIBRARY_DIRS})
    find_library(CTP_TRADE_LIBRARY NAMES thosttraderapi PATHS ${CTP_LIBRARY_DIRS})
    find_library(CTP_RISK_LIBRARY NAMES riskuserapi PATHS ${CTP_LIBRARY_DIRS})
    if(CTP_MDUSER_LIBRARY AND CTP_TRADE_LIBRARY AND CTP_RISK_LIBRARY)
        set(CTP_LIBRARIES ${CTP_MDUSER_LIBRARY} ${CTP_TRADE_LIBRARY} ${CTP_RISK_LIBRARY})
    endif()

    set(WS2_32 ws2_32)
elseif(UNIX)
    find_library(CTP_MDUSER_LIBRARY NAMES thostmduserapi PATHS ${CTP_LIBRARY_DIRS})
    find_library(CTP_TRADE_LIBRARY NAMES thosttraderapi PATHS ${CTP_LIBRARY_DIRS})
    if(CTP_MDUSER_LIBRARY AND CTP_TRADE_LIBRARY)
        set(CTP_LIBRARIES ${CTP_MDUSER_LIBRARY} ${CTP_TRADE_LIBRARY})
    endif()
endif()

include_directories(${Boost_INCLUDE_DIRS} ${CURL_INCLUDE_DIRS} ${QUICKFIX_INCLUDE_DIRS} ${TWS_INCLUDE_DIRS} ${CTP_INCLUDE_DIRS} ${RUBY_INCLUDE_DIRS})
include_directories(${PROJECT_SOURCE_DIR}/vendors/otl)
include_directories(${PROJECT_SOURCE_DIR}/src)
link_directories(${Boost_LIBRARY_DIRS})

add_subdirectory(src)
add_subdirectory(examples)
add_subdirectory(server)
add_subdirectory(tools)

configure_file(${PROJECT_SOURCE_DIR}/config.h.cmake ${PROJECT_BINARY_DIR}/config.h)
include_directories(${PROJECT_BINARY_DIR})

option(BUILD_TESTS "Build tests." TRUE)
if (BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()
if(WIN32)
    configure_file(${PROJECT_SOURCE_DIR}/vendors/ctp/api/trade/win/lib/thostmduserapi.dll ${PROJECT_BINARY_DIR}/bin/thostmduserapi.dll COPYONLY)
    configure_file(${PROJECT_SOURCE_DIR}/vendors/ctp/api/trade/win/lib/thosttraderapi.dll ${PROJECT_BINARY_DIR}/bin/thosttraderapi.dll COPYONLY)
    configure_file(${PROJECT_SOURCE_DIR}/vendors/ctp/api/risk/lib/riskuserapi.dll ${PROJECT_BINARY_DIR}/bin/riskuserapi.dll COPYONLY)
endif(WIN32)
